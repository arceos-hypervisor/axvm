searchState.loadedDescShard("axvm", 0, "This crate provides a minimal VM monitor (VMM) for running …\nA reference to a vCPU.\nA Virtual Machine.\nThe interfaces which the underlying software (kernel or …\nThe architecture-independent per-CPU type.\nA reference to a VM.\nThe low-level <strong>OS-dependent</strong> helpers that must be provided …\nAllocates an IVC channel for inter-VM communication region.\nAllocates a memory region at the specified physical …\nBoots the VM by setting the running flag as true.\nThe configuration structure for the VM. The <code>AxVMCrateConfig</code>…\nReturns a reference to the VM’s configuration.\nCurrent Physical CPU ID.\nCurrent time in nanoseconds.\nCurrent Virtual CPU ID.\nCurrent VM ID.\nDeallocates a memory region at the specified physical …\nReturns the base address of the two-stage address …\nReturns the argument unchanged.\nReturns this VM’s emulated devices.\nReturns guest VM image load region in …\nWhether the hardware has virtualization support.\nReturns the VM id.\nInjects an interrupt to the vCPU.\nInject an IRQ to the specified VCPU.\nCalls <code>U::from(self)</code>.\nMaps a region of host physical memory to guest physical …\nCreates a new VM with the given configuration. Returns an …\nReads an object of type <code>T</code> from the guest physical address.\nReleases an IVC channel for inter-VM communication region.\nRun a vCPU according to the given vcpu_id.\nReturns if the VM is running.\nShuts down the VM by setting the shutting_down flag as …\nReturns if the VM is shutting down.\nUnmaps a region of guest physical memory.\nRetrieves the vCPU corresponding to the given vcpu_id for …\nReturns a reference to the list of vCPUs corresponding to …\nReturns the number of vCPUs corresponding to the VM.\nGet the Physical CPU ID where the specified VCPU of the …\nConverts a virtual address to the corresponding physical …\nWrites an object of type <code>T</code> to the guest physical address.\nA part of <code>AxVCpuConfig</code>, which represents an …\nA part of <code>AxVMCrateConfig</code>, which represents a <code>VM</code>.\nThe configuration structure for the guest VM serialized …\nThe VM will use the emulated interrupt controller to …\nA part of <code>AxVMConfig</code>, which represents the configuration …\nThe memory region is allocated by the VM monitor.\nThe memory region is identical to the host physical memory …\nThe VM will not handle interrupts, and the guest OS should …\nA part of <code>AxVMConfig</code>, which represents the configuration …\nThe VM will use the passthrough interrupt controller …\nA part of <code>AxVMConfig</code>, which stores configuration …\nSpecifies how the VM should handle interrupts and …\nHost VM, used for boot from Linux like Jailhouse do, named …\nGuest Linux, generally a full-featured guest OS with …\nGuest RTOS, generally a simple guest OS with most of the …\nA part of <code>AxVMConfig</code>, which represents guest VM type.\nConfiguration for a virtual machine memory region.\nThe type of memory mapping used for VM memory regions.\nAdds a new memory region to the VM configuration.\nAdds a new passthrough device to the VM configuration.\nAdds a passthrough SPI to the VM configuration.\nReturns the entry address in GPA for the Application …\nThe entry address in GPA for the Application Processor …\nThe base configuration for the VM.\nThe base GPA (Guest Physical Address) of the device.\nThe base GPA (Guest Physical Address) of the device.\nThe base HPA (Host Physical Address) of the device.\nThe load address in GPA for the BIOS image, <code>None</code> if not …\nReturns the entry address in GPA for the Bootstrap …\nThe entry address in GPA for the Bootstrap Processor (BSP).\nThe config_list of the device\nChecks if the VM memory regions contain a specific range.\nThe devices configuration for the VM.\nThe load address in GPA for the device tree blob (DTB), …\nReturns configurations related to VM emulated devices.\nThe type of emulated device.\nThe mappings flags of the memory region, refers to …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nDeserialize the toml string to <code>AxVMCrateConfig</code>.\nReturns vCpu id list and its corresponding pCpu affinity …\nThe start address of the memory region in GPA (Guest …\nReturns VM id.\nReturns configurations related to VM image load addresses.\nReturns the interrupt mode of the VM.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe IRQ (Interrupt Request) ID of the device.\nThe IRQ (Interrupt Request) ID of the device.\nThe kernel configuration for the VM.\nThe load address in GPA for the kernel image.\nThe address length of the device.\nThe address length of the device.\nThe type of memory mapping. Determines whether memory is …\nReturns configurations related to VM memory regions.\nReturns VM name.\nThe name of the device.\nThe name of the device.\nReturns configurations related to VM passthrough devices.\nReturns the list of passthrough SPIs.\nThe load address in GPA for the ramdisk image, <code>None</code> if not …\nThe size of the memory region in bytes.")